nameOverride: ""
fullnameOverride: ""

global:
  env: []

api:
  name: dotbot-api
  replicaCount: 1
  image:
    repository: ghcr.io/opentoucan/dotbot.api
    tag: 3.2.2@sha256:7676261ec2510722831bdb92ae9dd48c1d05b806546e34a44bce9516f10af8dd
    imagePullPolicy: IfNotPresent
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 2048
    runAsGroup: 2048
    fsGroup: 2048
    supplementalGroups: [2048]
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 2048
    allowPrivilegeEscalation: false
  containerPorts:
    http: 8080
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  volumes: []
  volumeMounts: []
  env:
    - name: ASPNETCORE_ENVIRONMENT
      value: Production
  existingSecret: ""

  service:
    type: ClusterIP
    httpPortName: http
    httpPort: 80

  serviceAccount:
    create: true
    annotations: {}

  ingress:
    enabled: false
    ingressClassName: ""
    annotations: {}
    path: /
    pathType: Prefix
    hosts:
      - dotbot.local
    tls: []

  route:
    main:
      # -- Enables or disables the route
      enabled: false

      # -- Set the route apiVersion, e.g. gateway.networking.k8s.io/v1 or gateway.networking.k8s.io/v1alpha2
      apiVersion: gateway.networking.k8s.io/v1
      # -- Set the route kind
      # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
      kind: HTTPRoute

      annotations: {}
      labels: {}

      hostnames:
        - dotbot.example.com
      parentRefs: []
      # - name: acme-gw

      matches:
        - path:
            type: PathPrefix
            value: /
      filters: []
      additionalRules: []

migrator:
  name: dotbot-migrator
  ttlSecondsAfterFinished: 100
  backoffLimit: 10
  image:
    repository: ghcr.io/opentoucan/dotbot.migrator
    tag: 3.2.2@sha256:7c47369c557f2580b4b9fd95454b7e60e700ae130216e8bb1301924def610feb
    imagePullPolicy: IfNotPresent
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 2048
    runAsGroup: 2048
    fsGroup: 2048
    supplementalGroups: [2048]
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 2048
    allowPrivilegeEscalation: false
  volumes:
    - name: cache-volume
      emptyDir:
        sizeLimit: 500Mi
  volumeMounts:
    - mountPath: /cache
      name: cache-volume
  env:
    - name: DOTNET_BUNDLE_EXTRACT_BASE_DIR
      value: /cache
    - name: ASPNETCORE_ENVIRONMENT
      value: Production
  existingSecret: ""
  serviceAccount:
    create: true
    annotations: {}

# environment variables for configMap
env: {}
#  RabbitMQ__Endpoint: 'rabbitmq'
#  RabbitMQ__port: '5672'
#  S3__ServiceUrl: 'minio:9000'
#  OTEL_EXPORTER_OTLP_ENDPOINT: 'http://opentelemetry-operator.default.svc.cluster.local:8080'
configMapAnnotations: {}

# Secrets
discord:
  publicKey: ''
  token: ''
  webhooks:
    xkcd: ''

postgres:
  install: true
  name: dotbot-postgres
  # -- Create the database if populated
  database: dotbot
  # -- Create superuser username
  username: dotbot
  # -- Create superuser password
  password: dotbot
  ## Postgres image
  image:
    repository: docker.io/library/postgres
    tag: 18.0-trixie@sha256:1d288494853e244e7a78d87b3526e650e5221c622f9768ecac9313d0874a9c39
    imagePullPolicy: ""
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  containerPorts:
    postgres: 5432
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  volumes: []
  volumeMounts: []

  service:
    type: ClusterIP
    postgresPortName: postgres
    postgresPort: 5432


rabbitmq:
  install: true
  name: dotbot-rabbitmq
  username: test
  password: test
  image:
    repository: docker.io/library/rabbitmq
    tag: 4.2.0-beta.1-management@sha256:171826afa206bc3909afd17f02b7ffd97646d88e78789eca9fb0c44c438e7c1f
    imagePullPolicy: ""
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    runAsUser: 2048
    runAsGroup: 2048
    fsGroup: 2048
    supplementalGroups: [2048]
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 2048
    allowPrivilegeEscalation: false
  containerPorts:
    amqp: 5672
    management: 15672
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  volumes: []
  volumeMounts: []

  service:
    type: ClusterIP
    amqpPortName: amqp
    amqpPort: 5672
    managementPortName: management
    managementPort: 15672


s3:
  install: true
  name: dotbot-s3
  accessKeyId: 'dev'
  secretAccessKey: 'dev'
  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2025-07-23T15-54-02Z@sha256:d249d1fb6966de4d8ad26c04754b545205ff15a62e4fd19ebd0f26fa5baacbc0
    imagePullPolicy: ""
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  containerPorts:
    s3: 9000
    management: 9001
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  volumes:
    - name: data
      emptyDir:
        sizeLimit: 500Mi
  volumeMounts:
    - mountPath: /data
      name: data
  service:
    type: ClusterIP
    s3PortName: s3
    s3Port: 9000
    managementPortName: management
    managementPort: 9001
